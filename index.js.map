{"version":3,"file":"index.js","sources":["src/index.js"],"sourcesContent":["import Mirror, {shallowEqual} from 'react-mirror'\nimport invariant from 'invariant'\nimport most from 'most'\n\nlet counter = 0\n\nconst newId = () => {\n  counter++\n  return counter.toString(36)\n}\n\nconst CollectionModel = Mirror({\n  name: 'COLLECTION',\n  state(mirror) {\n    const {\n      target,\n      empty,\n      getEntries = collection => {\n        return collection instanceof Array\n          ? collection\n          : Object.keys(collection).map(id => ({id, value: collection[id]}))\n      },\n      setEntries = (collection, entries, changed) => {\n        if (collection instanceof Array) return entries\n        else {\n          changed.forEach(i => (collection[entries[i].id] = entries[i].value))\n          return collection\n        }\n      },\n      clone = collection => {\n        return collection instanceof Array\n          ? collection.slice()\n          : Object.assign({}, collection)\n      },\n      changed = (previous, next) => {\n        next = Object.assign({}, next)\n        delete next.id\n        return !shallowEqual(previous, next)\n      },\n      reducer = (previous, {type, payload}) => {\n        payload = Object.assign({}, payload)\n        delete payload.id\n        return payload\n      }\n    } = this.props\n\n    invariant(target, 'target is required')\n    invariant(empty, 'empty is required')\n\n    let collection = clone(empty)\n\n    return most.merge(\n      target(mirror).$state.map(stores => {\n        const storeEntries = {}\n        stores.forEach(state => state.id && (storeEntries[state.id] = state))\n        const changedIndexes = []\n        const previousEntries = getEntries(collection)\n        const nextEntries = previousEntries.map(({id, value}, i) => {\n          if (changed(value, storeEntries[id]) && storeEntries[id] !== undefined) {\n            changedIndexes.push(i)\n            value = reducer(value, {\n              type: 'STATE_CHANGE',\n              payload: storeEntries[id]\n            })\n          }\n          return {id, value}\n        })\n        Object.assign(this, {\n          changedIndexes,\n          previousIds: previousEntries.map(({id}) => id),\n          nextIds: nextEntries.map(({id}) => id)\n        })\n        collection = clone(collection)\n        collection = setEntries(collection, nextEntries, changedIndexes)\n        return collection\n      }),\n      mirror.$actions\n        .filter(({type}) => type === 'TRANSFORM')\n        .map(({payload: transform}) => {\n          collection = clone(collection)\n          const previousEntries = getEntries(collection)\n          const previousIds = previousEntries.map(({id}) => id)\n          const previousEntriesMap = {}\n          previousEntries.forEach(({id, value}) => (previousEntriesMap[id] = value))\n          const nextCollection = transform(collection)\n          const changedIndexes = []\n          const nextEntries = getEntries(nextCollection).map(({id, value}, i) => {\n            if (changed(previousEntriesMap[id] && previousEntriesMap[id], value)) {\n              changedIndexes.push(i)\n              value = reducer(previousEntriesMap[id], {\n                type: 'TRANSFORM',\n                payload: value\n              })\n            }\n            return {id, value}\n          })\n          Object.assign(this, {\n            changedIndexes,\n            previousIds,\n            nextIds: nextEntries.map(({id}) => id)\n          })\n          collection = setEntries(nextCollection, nextEntries, changedIndexes)\n          return collection\n        })\n    )\n  },\n  pure: {\n    stateEqual(prev, next) {\n      return (\n        prev !== undefined &&\n        !this.changedIndexes.length &&\n        shallowEqual(this.previousIds, this.nextIds)\n      )\n    }\n  }\n})()\n\nexport {newId}\nexport default CollectionModel\n"],"names":["counter","newId","toString","CollectionModel","Mirror","mirror","props","target","empty","getEntries","collection","Array","Object","keys","map","id","value","setEntries","entries","changed","forEach","i","clone","slice","assign","previous","next","shallowEqual","reducer","type","payload","most","merge","$state","storeEntries","state","changedIndexes","previousEntries","nextEntries","undefined","push","$actions","filter","transform","previousIds","previousEntriesMap","nextCollection","prev","length","nextIds"],"mappings":"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"}
{"version":3,"file":"index.js","sources":["src/index.js"],"sourcesContent":["import Mirror from 'react-mirror'\nimport invariant from 'invariant'\nimport most from 'most'\n\nlet counter = 0\n\nconst newId = () => {\n  counter++\n  return counter.toString(36)\n}\n\nconst CollectionController = Mirror({\n  name: 'COLLECTION',\n  state(mirror) {\n    const {\n      target,\n      empty,\n      getEntries = collection => {\n        return collection instanceof Array\n          ? collection\n          : Object.keys(collection).map(id => ({id, value: collection[id]}))\n      },\n      setEntries = (collection, entries, changed) => {\n        if (collection instanceof Array) return entries\n        changed.forEach(i => (collection[entries[i].id] = entries[i].value))\n        return collection\n      },\n      clone = collection => {\n        return collection instanceof Array\n          ? collection.slice()\n          : Object.assign({}, collection)\n      },\n      changed = (previous, current) => previous !== current,\n      reducer = (previous, {type, payload}) => {\n        payload = Object.assign({}, payload)\n        delete payload.id\n        return payload\n      },\n      cloneOn = {}\n    } = this.props\n\n    Object.assign(cloneOn, {transform: true, stateChange: true}, cloneOn)\n\n    invariant(target, 'target is required')\n    invariant(empty, 'empty is required')\n\n    let collection = clone(empty)\n\n    mirror.$actions.forEach(({type}) => {\n      if (type === 'CLONE') collection = clone(collection)\n    })\n\n    return most.mergeArray([\n      target(mirror).$state.map(stores => {\n        const storeEntries = {}\n        stores.forEach(state => state.id && (storeEntries[state.id] = state))\n        const changedIndexes = []\n        const nextEntries = getEntries(collection).map(({id, value}, i) => {\n          if (changed(value, storeEntries[i])) {\n            changedIndexes.push(i)\n            value = reducer(value, {\n              type: 'STATE_CHANGE',\n              payload: storeEntries[id]\n            })\n          }\n          return {id, value}\n        })\n        if (cloneOn.stateChange) collection = clone(collection)\n        collection = setEntries(collection, nextEntries, changedIndexes)\n        return collection\n      }),\n      mirror.$actions.filter(({type}) => type === 'CLONE').map(() => {\n        collection = clone(collection)\n        return collection\n      }),\n      mirror.$actions\n        .filter(({type}) => type === 'TRANSFORM')\n        .map(({payload: transform}) => {\n          if (cloneOn.transform) collection = clone(collection)\n          const previousEntries = {}\n          getEntries(collection).forEach(({id, value}) => (previousEntries[id] = value))\n          const nextCollection = transform(collection)\n          const changedIndexes = []\n          const nextEntries = getEntries(nextCollection).map(({id, value}, i) => {\n            if (changed(previousEntries[id] && previousEntries[id], value)) {\n              changedIndexes.push(i)\n              value = reducer(previousEntries[id], {\n                type: 'TRANSFORM',\n                payload: value\n              })\n            }\n            return {id, value}\n          })\n          collection = setEntries(nextCollection, nextEntries, changedIndexes)\n          return collection\n        })\n    ])\n  },\n  pure: {state: false}\n})()\n\nexport {newId}\nexport default CollectionController\n"],"names":["counter","newId","toString","CollectionController","Mirror","mirror","props","target","empty","getEntries","collection","Array","Object","keys","map","id","value","setEntries","entries","changed","forEach","i","clone","slice","assign","previous","current","reducer","type","payload","cloneOn","transform","stateChange","$actions","most","mergeArray","$state","storeEntries","state","changedIndexes","nextEntries","push","filter","previousEntries","nextCollection"],"mappings":"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"}